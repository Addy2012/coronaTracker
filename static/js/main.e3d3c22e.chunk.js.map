{"version":3,"sources":["components/Cards/Cards.js","api/getAPI.js","components/Chart/Chart.js","components/CountryPicker/CountryPicker.js","App.js","index.js"],"names":["Cards","data","confirmed","recovered","deaths","lastUpdate","className","Grid","container","spacing","justify","item","component","Card","xs","md","cx","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","separator","Date","toDateString","url","fetchData","country","a","changeableurl","Axios","get","console","log","fetchDailyData","modifiedData","map","dailyData","total","date","reportDate","fetchCountries","countries","name","Chart","useState","setDailyData","useEffect","fetchAPI","barChart","labels","datasets","label","backgroundColor","options","legend","display","title","text","lineChart","length","borderColor","fill","CountryPicker","handleCountryChange","fetchedCountries","setFetchedCountries","FormControl","NativeSelect","defaultValue","onChange","e","target","i","key","App","state","fetchedData","setState","this","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e3d3c22e.chunk.js","sourcesContent":["import React from 'react';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Grid from '@material-ui/core/Grid'\r\nimport './Cards.css';\r\nimport CountUp from 'react-countup'\r\nimport cx from 'classnames'\r\n\r\nconst Cards = ({data:{ confirmed , recovered , deaths , lastUpdate }}) => {\r\n    if(!confirmed){\r\n        return 'Loading...'\r\n    }\r\n    return (\r\n        <div className=\"container\">\r\n            <Grid container spacing={3} justify=\"center\">\r\n                <Grid item component={Card} xs={12} md={3} className={cx('card','infected')}>\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom>Infected</Typography>\r\n                        <Typography variant=\"h5\">\r\n                            <CountUp start={0} end={confirmed.value} duration={3.5} separator=\",\" />\r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n                        <Typography variant=\"body2\">Number of active cases of COVID 19</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n                <Grid item component={Card} xs={12} md={3} className={cx('card','recovered')}>\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom>Recovered</Typography>\r\n                        <Typography variant=\"h5\">\r\n                            <CountUp start={0} end={recovered.value} duration={3.5} separator=\",\" />\r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n                        <Typography variant=\"body2\">Number of recoveries from COVID 19</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n                <Grid item component={Card} xs={12} md={3} className={cx('card','deaths')}>\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom>Death</Typography>\r\n                        <Typography variant=\"h5\">\r\n                            <CountUp start={0} end={deaths.value} duration={3.5} separator=\",\" />\r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n                        <Typography variant=\"body2\">Number of death due to COVID 19</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n    )   \r\n}\r\n\r\n\r\nexport default Cards","import Axios from 'axios'\r\n\r\nconst url=\"https://covid19.mathdro.id/api\";\r\n\r\nexport const fetchData= async(country)=>{\r\n    let changeableurl = url;\r\n    if(country){\r\n        changeableurl=`${url}/countries/${country}`\r\n    }\r\n    try {\r\n        const {data:{confirmed,recovered,deaths,lastUpdate}}=await Axios.get(changeableurl);\r\n        return {confirmed, recovered, deaths, lastUpdate};\r\n    } catch (error) {\r\n        console.log(error)\r\n    }\r\n}\r\n\r\nexport const fetchDailyData = async() => {\r\n    try {\r\n        const { data } = await Axios.get(`${url}/daily`);\r\n\r\n        const modifiedData= data.map((dailyData)=>({\r\n            confirmed: dailyData.confirmed.total,\r\n            deaths: dailyData.deaths.total,\r\n            date: dailyData.reportDate,\r\n        }))\r\n        return modifiedData;\r\n    } catch (error) {\r\n        console.log(error)\r\n    }\r\n}\r\n\r\nexport const fetchCountries = async ()=>{\r\n    try {\r\n        const { data : {countries} } = await Axios.get(`${url}/countries`)\r\n        \r\n        return countries.map((country) => country.name)\r\n        // console.log(response)\r\n    } catch (error) {\r\n        console.log(error)\r\n    }\r\n}","import React , {useState, useEffect} from 'react';\r\nimport { fetchDailyData } from '../../api/getAPI';\r\nimport { Line, Bar } from 'react-chartjs-2';\r\nimport \"./Chart.css\";\r\n\r\nconst Chart=({ data:{confirmed , recovered , deaths}, country })=>{\r\n    const [dailyData, setDailyData] = useState([])\r\n    \r\n    useEffect(() => {\r\n        const fetchAPI= async () => {\r\n            setDailyData(await fetchDailyData());\r\n        }\r\n\r\n        fetchAPI()\r\n    },[]);\r\n    \r\n    const barChart= (\r\n        confirmed\r\n            ?(\r\n                <Bar\r\n                    data={{\r\n                        labels:['Infected','Recovered','Deaths'],\r\n                        datasets:[{\r\n                            label: 'People',\r\n                            backgroundColor: [\r\n                                'rgba(0, 0, 255, 0.5)',\r\n                                'rgba(0, 255, 0, 0.5)',\r\n                                'rgba(255, 0, 0, 0.5)',\r\n                            ],\r\n                            data:[confirmed.value,recovered.value,deaths.value]\r\n                        }]\r\n                    }}\r\n                    options={{\r\n                        legend: { display: false},\r\n                        title: { display: true, text:`Current state in ${country}`}\r\n                    }}\r\n                />\r\n            ) : null\r\n    );\r\n    const lineChart = (\r\n        dailyData.length\r\n            ? (\r\n            <Line \r\n            data={{ \r\n                labels: dailyData.map(({date}) => date ), \r\n                datasets: [{\r\n                    data: dailyData.map(({confirmed})=>confirmed),\r\n                    label: 'Infected',\r\n                    borderColor:'#3333ff',\r\n                    fill:true,\r\n                },{\r\n                    data: dailyData.map(({deaths})=>deaths),\r\n                    label: 'Deaths',\r\n                    borderColor:'red',\r\n                    backgroundColor: 'rgba(255, 0, 0, 0.5)',\r\n                    fill:true,                    \r\n                }], \r\n            }}\r\n            />) : null\r\n    );\r\n    \r\n    return (\r\n        <div className=\"container\">\r\n            {country ? barChart : lineChart}\r\n\r\n        </div>\r\n    )   \r\n}\r\n\r\n\r\nexport default Chart","import React, {useState,useEffect} from 'react';\r\nimport NativeSelect from '@material-ui/core/NativeSelect';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport './CountryPicker.css';\r\nimport { fetchCountries } from '../../api/getAPI';\r\n\r\nconst CountryPicker=({handleCountryChange})=>{\r\n    const [fetchedCountries,setFetchedCountries]=useState([])\r\n\r\n    useEffect(() => {\r\n        const fetchAPI= async () => {\r\n            setFetchedCountries(await fetchCountries());\r\n        }\r\n\r\n        // console.log(\"daily \"+dailyData)\r\n\r\n        fetchAPI();\r\n    },[setFetchedCountries]);\r\n\r\n    console.log(fetchedCountries)\r\n\r\n    return (\r\n        <FormControl>\r\n            <NativeSelect defaultValue=\"\" onChange={(e) => handleCountryChange(e.target.value)}>\r\n                <option value=\"global\" >Global</option>\r\n                {fetchedCountries.map((country,i)=>\r\n                    <option key={i} value={country} >{country}</option>\r\n                )}\r\n            </NativeSelect>\r\n        </FormControl>\r\n    )   \r\n}\r\n\r\n\r\nexport default CountryPicker","import React,{Component} from 'react';\nimport './App.css';\nimport Cards from './components/Cards/Cards';\nimport Chart from './components/Chart/Chart'\nimport CountryPicker from './components/CountryPicker/CountryPicker';\nimport {fetchData} from './api/getAPI';\n\nclass App extends Component {\n  state={\n    data:{},\n    country:''\n  }\n  async componentDidMount(){\n    const fetchedData = await fetchData();\n    this.setState({data:fetchedData})\n  }\n  handleCountryChange = async (country) => {\n    const fetchedData = await fetchData(country);\n\n    this.setState({ data : fetchedData, country : country })\n  }\n  render(){ \n    const { data, country }=this.state\n    return (\n      <div className=\"container\">\n        <h3 className=\"siteName\">Addy Corona Tracker</h3>\n        <Cards data={data}/>\n        <CountryPicker className=\"country\" handleCountryChange={this.handleCountryChange}/>\n        <Chart data={data} country={country} />\n      </div>\n    )\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {BrowserRouter} from 'react-router-dom';\n\nReactDOM.render(\n  <BrowserRouter>\n  {/* <React.StrictMode> */}\n    <App />\n  {/* </React.StrictMode> */}\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n"],"sourceRoot":""}